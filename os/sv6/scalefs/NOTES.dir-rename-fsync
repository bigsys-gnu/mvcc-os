
Challenges with directory renames and fsync:
============================================

One of the general design goals for our fsync system call is to keep the amount
of dirty data written out to disk minimalistic; that is, we strive to flush out
only the dirty data that is associated with the file or directory being fsynced,
and nothing else, as much as possible.

However, there are situations where we will need to track dependencies between
directories and flush the dirty data associated with those dependent inodes as
well, in order to keep the on-disk filesystem structures consistent and to
preserve certain filesystem invariants.

Some of the important scenarios that come under this category are situations
where fsync() and rename() are involved. For example, when file renames are
involved, we explicitly track dependencies when fsyncing their parent
directories, to ensure that no combination of rename() and fsync() will ever
unintentionally delete files (or otherwise make them unreachable) on the disk.

One particularly challenging case involves fsync and directory renames. If we
aren't careful here, we can end up creating orphaned loops within the filesystem
directory hierarchy on the disk, breaking the filesystem's invariants!

It is straight-forward to avoid creating orphaned loops while executing the
rename() system call (in memory) by performing appropriate validity checks.
However, there is a different, rather subtle scenario, where the directory
renames proceed successfully in memory (maintaining the "no cycles" invariant
in the in-memory directory hierarchy), but a subsequent "minimalistic" fsync
can end up creating orphaned loops on the disk as shown below.


Initial state on the disk:
--------------------------

A, B, C and D are directories.

          root (/)
           /
          /
         A
          \
           \
            B
           /
          /
         C
          \
           \
            D

The above directory tree is already on the disk. Now, we perform the following
directory renames:

Step 1: mv /A/B/C  /C
Step 2: mv /A/B    /C/D/B

Both these renames are valid, and they rearrange the directory tree in memory
as shown below.

             root (/)                       root (/)
              / \                            / \
             /   \                          /   \
Step 1 =>   A     C        Step 2 =>       A     C
             \     \                              \
              \     \                              \
               B     D                              D
                                                   /
                                                  /
                                                 B

Everything is good so far in memory and none of these changes have been written
to the disk yet. Now the user invokes fsync on /C/D.

If fsync strives to flush out the absolute minimum dirty data (corresponding
to the changes made only to directory D), then we'll end up with an orphaned
loop on the disk (even though the directory hierarchy in memory is just fine!)
as shown below:

          root (/)
           |
           |
           v
           A

      +----> C ----+
      |            |
      B            |
      ^            |
      |            v
      + ---------- D

The trouble is that the "minimal flush" doesn't quite capture enough of the
recent structural changes to the directory hierarchy - in particular, directory
B still thinks that C is its sub-directory, when in reality C has been made an
ancestor of B! That creates the loop. Also, since C was reachable only via B
(/A/B/C) in the original hierarchy on the disk, and we happened to erase the
crucial A->B link in the process of moving B into C, we lose access to C from
the root (/). This causes the loop to get disconnected from the rest of the
tree and thus turn into an orphaned loop!


Now, let's try to analyze how we managed to get ourselves entangled this way.

Looking closer, the moves can be described pictorially like this:

          root (/)
           /
          /
         A
          \
           \
            B  (Ancestor)
           /
         ^^^^^ <---- CUT
          /
         C
          \
           \
            D  (Descendant)


We can generalize this figure to:


          root (/)
           /
          /
         A
          \
           \
            B  (Ancestor)
           /
           .
           .
           .
         ^^^^^ <---- CUT
           .
           .
           .
          /
         X
          \
           \
            Y  (Descendant)
           /
          /
         Z

We can see that this represents the following two deliberate actions:

1. Pick an ancestor and a descendant, and perform a cut somewhere in between
   them. Move the bottom portion of the cut away and attach it elsewhere,
   such that the ancestor we chose earlier is no longer an ancestor of the
   chosen descendant, in the resultant tree.

   Thus, after this step, any directory (*) in the upper portion of the cut
   can be moved into any directory in the lower portion of the cut.

   (*) More precisely, any directory that is not a new ancestor of the
       bottom portion of the cut, after that portion has been attached
       elsewhere.

2. Move the originally chosen ancestor into the originally chosen descendant.

Note that the rename system call will allow step 2 to proceed in memory,
only because it happens after the cut operation (step 1). Otherwise, it would
immediately violate the filesystem's "no cycles" invariant.

The directory hierarchy in memory is fine so far. But we can trick the
filesystem into causing a loop on the disk if we manage to make fsync skip
step 1 and flush only the changes made in step 2; that is, by invoking fsync
on either the descendant (Y), or on the ancestor's parent (A), because those
are the only 2 directories (source and destination) that were dirtied in
step 2.


Proposed solution:
------------------

Considering the above analysis, the solution to this problem is quite clear:
don't let fsync skip step 1 (i.e., flushing the cut) under any circumstance.
In other words, irrespective of where (on which directory) the fsync is
invoked, first go find the cut and flush it out, and only then flush the
directory being fsynced. But it turns out that this can get a bit tricky and
is easier said than done because we will have to deal with a variety of corner
cases.

An alternative approach is to ensure that before flushing a directory rename
operation, the set of ancestors of the destination directory (i.e., its
absolute path) on the disk is exactly the same as that in memory. That way,
flushing the rename will not cause a loop on the disk, because the rename
didn't cause a loop in memory with the same ancestors (and we know that the
only way to cause a loop is to move an ancestor into a descendant). This is
the core idea behind our fsync loop-avoidance algorithm.

[ Also, it is not that hard to see that these two approaches are actually
equivalent : i.e., flushing the ancestors of the destination directory
automatically implies flushing the "cut" as well, because the cut (if it
exists) is certainly somewhere within the path going from the destination
directory upto the root. ]

At this juncture, there is an important design aspect to be considered, which
poses some constraints on our fsync algorithm. ScaleFS mainly consists of 3
parts:

          MemFS  ---->  Oplog Layer / Fsync  --->  DiskFS

At the time of fsync, looking up the current (in-memory) ancestors of a
directory amounts to adding a dependency between the Oplog layer and MemFS
in the reverse direction, which implies a tight coupling between the two.
But we had originally designed them to be well-separated, with a controlled
flow from MemFS to Oplog, and we would like to keep them that way. To achieve
this, we capture the ancestors of the destination directory at the time of
executing the rename operation in memory (MemFS) and log them to Oplog, along
with the rename operation. With this extra metadata in Oplog, we can avoid
consulting MemFS at the time of flushing the rename operation to disk during
an fsync.


Now that we have given the high-level overview of the fsync loop-avoidance
algorithm, we give its pseudocode below, to make its definition precise enough
that we can write a proof of its correctness later on.


----------------------------- MemFS stage --------------------------------

mfs_dir_rename(path old_path, path new_path)
{
  acquire(&dir_rename_lock); // Global lock to prevent concurrent dir renames.

  src_dir = nameiparent(old_path);
  dst_dir = nameiparent(new_path);
  move_dir = namei(old_path);

  // Check if it is safe to perform this rename. In particular, make sure that
  // it won't cause a loop in the filesystem hierarchy in memory.
  if (!rename_valid(move_dir, src_dir, dst_dir))
    return;

  // Add a rename barrier (with a common timestamp) to all the ancestors of
  // the destination directory. We can capture a consistent snapshot of its
  // ancestors because the lock above prevents concurrent modifications to the
  // directory tree.
  ts = get_current_timestamp();
  dir = dst_dir;
  while (true) {
    dir->add_to_oplog(rename_barrier(dir, dir->parent, ts));
    if (dir == root)
      break;
    dir = dir->parent;
  }

  perform_dir_rename(move_dir, src_dir, dst_dir);

  dst_dir->add_to_oplog(rename_op(move_dir, src_dir, dst_dir));

  release(&dir_rename_lock);
}

----------------- Fsync stage (Oplog -> DiskFS transition) ---------------

fsync(dir E)
{
  dir_fsync_upto_op(E, get_last_op(E));
}

dir_fsync_upto_op(dir E, op f)
{
  if (get_first_op(E)->timestamp > f->timestamp)
    return; // We have already flushed upto and beyond the specified operation.

  for each oplog operation 'op' in E (in timestamp order) {
    switch(op.type) {
    case rename_barrier:
      flush_rename_barrier(op);
      break;
    case dir_rename:
      flush_dir_rename(op);
      break;
    default: flush(op);
    }

    if (op == f)
      return;
  }
}

flush_rename_barrier(op f)
{
  dst_dir = get_dst_dir(f);

  // Before flushing the specified rename barrier, recursively flush the
  // corresponding rename barriers in our ancestors all the way upto the
  // root.

  if (dst_dir != root) {
    // Find the destination directory's parent at the time of executing
    // the rename operation (in MemFS), using the info in the oplog. This
    // may not be its current parent in memory.
    dst_parent = get_dst_parent(f);
    parent_barrier = find_rename_barrier(dst_parent, f);

    if (parent_barrier)
      dir_fsync_upto_op(dst_parent, parent_barrier);
  }

  flush(f);
}

find_rename_barrier(dir D, op f)
{
  if (get_first_op(D)->timestamp > f->timestamp)
    return; // The specified rename barrier has been flushed already.

  for each oplog operation 'op' in D (in timestamp order) {
    if (op->timestamp == f->timestamp)
      return op;
  }

  return NULL;
}

flush_dir_rename(op f)
{
  // By now all the rename barriers associated with this directory rename
  // operation have been flushed; and that in turn has propagated the state
  // changes of the ancestors (of the destination directory) to the disk.
  // So now it is finally safe to flush the rename operation and this is
  // guaranteed to not cause loops on the disk.

  flush(f);
}

---------------------------------------------------------------------------


(Semi-formal) Proof of correctness for this fsync loop-avoidance algorithm:
---------------------------------------------------------------------------

Theorem: The fsync loop-avoidance algorithm described above prevents (orphaned)
loops from getting formed in the filesystem hierarchy on the disk.

(Assumption: The rename system call does not allow loops to be formed in
the directory hierarchy in memory (MemFS).)

Proof:

A couple of quick observations from the pseudocode above:

* dir_fsync_upto_op() makes it clear that the changes to a given directory
  (i.e., its operations) are always flushed in timestamp order.

* A rename barrier accompanies each directory rename operation, and spans all
  the ancestors of the destination directory (see mfs_dir_rename()). This is
  our way of capturing the ancestors of the destination directory in the Oplog,
  as seen at the time of performing the rename (in MemFS).

* A rename barrier at a given directory is flushed only after flushing all the
  corresponding rename barriers at all its ancestors. (Note that these
  "ancestors" correspond to how things were at the time of performing the
  rename in memory, and not necessarily at the time of fsync).

* A rename barrier preceeds the rename operation logged in the destination
  directory. Thus, it follows that before the rename operation is flushed, the
  act of (recursively) flushing the rename barriers makes sure that the states
  of each of the ancestors of the destination directory on the disk, are at
  least as up-to-date as their state at the time of performing the rename
  operation in memory (MemFS).


If the last directory rename is immediately followed by an fsync on the
destination directory, it is easy to see that the above fsync algorithm
replicates the in-memory absolute path of the destination directory on to
the disk, before flushing the rename operation itself. As discussed before,
this clearly avoids forming loops on the disk (because there are no loops in
memory, and the destination directory has the same set of ancestors both in
memory and on the disk).

However, there could be many other fsync calls (and perhaps additional
renames too) before running this particular fsync, and hence, it is possible
that we won't be able to recreate the ancestors on the disk exactly as they
were in memory at the time of the rename. So can we still be certain that
the above algorithm won't cause loops on the disk?

It turns out that the answer is yes! To see why, note that the state of the
ancestors on the disk is at least as recent as their state at the time of
the rename operation in memory, due to the rename barriers. That is, if a
rename operation moved directory C into directory E, then, the act of
flushing the rename barriers ensures that E's ancestors on disk exclude C.
(Alternatively, flushing the rename barriers also indirectly flushes the "cut"
as outlined above, whose sole purpose is to ensure that C is no longer an
ancestor of E on the disk, in order to make it safe to move C into E as part
of the rename).

However, due to intervening fsyncs, the state of E's ancestors on the disk
could reflect changes that occurred after the rename operation in memory.
Furthermore, let alone the state of E's ancestors, these fsyncs could have
caused the very *set* of E's current ancestors on the disk to be completely
different than its set of ancestors at the time of performing the rename in
memory! So how can we be sure that C is not once again an ancestor of E on
the disk just before we intend to flush the rename of C into E? (because
that's the only way to force a rename to cause a loop).

We can rest assured that that is impossible, because, for that to happen, C
must be moved away from E in the first place, and that operation can only
follow the rename of C into E, in chronological order. And since we always flush
all the changes to a directory in timestamp order, it follows that none of the
additional state changes that were flushed by the other fsyncs could have
caused C to become an ancestor of E once again; at least not yet... not until
C is moved into E on the disk first. Hence, it follows that this algorithm
can guarantee that no loops are ever formed on the disk, irrespective of the
order of renames and fsyncs. Hence proved.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Below are a few sample scenarios on which this algorithm has been simulated
just to make sure that it works:

Example 1:
==========

A-D are directories. /A/B/C/D exists on the disk.

Perform the following directory renames:

Step 1: mv /A/B/C  /C
Step 2: mv /A      /C/A
Step 3: mv /C/A/B  /C/D/B

Then fsync /C/D. Verify that it doesn't cause the orphaned loop C->D->B->C.

Example 2:
==========

A-J are directories. /A/B/C/D/E/F/G/H/I/J exists on the disk.

Perform the following directory renames:

Step 1: mv /A/B/C/D/E/F/G  /G
Step 2: mv /A/B/C          /G/C
Step 3: mv /G/C/D/E/F      /G/H/I/J/F

Then fsync /G/H/I/J. Verify that it doesn't cause the orphaned loop
G->H->I->J->F->G.

Example 3:
==========

A-F are directories. /A/B/C/D/E/F exists on the disk.

Perform the following directory renames:

Step 1: mv /A/B/C/D   /D
Step 2: mv /A/B       /D/E/F/B

Then fsync /D/E/F. Verify that it doesn't cause the orphaned loop
C->D->E->F->B->C.


Example 4: Preventing loops in one sub-tree can cause a loop in another
=======================================================================

A-P are directories. /A/B/C/D/E/F/G/H/I/J and /A/B/C/D/E/F/G/H/K/L/M/N/O/P
exist on the disk. (Note that H has 2 sub-trees).

Perform the following directory renames:

Step 1: mv /A/B/C/D/E/F/G/H/K/L/M    /A/B/M
Step 2: mv /A/B/C/D/E/F/G/H          /A/B/M/N/O/P/H
Step 3: mv /A/B/C                    /A/B/M/N/O/P/H/I/J/C

Then,
a. fsync /A/B/M/N/O/P/H/I/J  (this is the complicated case).
   Verify that it doesn't cause the orphaned loop C->D->E->F->G->H->I->J->C
   or the orphaned loop K->L->M->N->O->P->H->K

b. Alternatively, as a different (simpler) exercise, fsync /A/B/M/N/O/P instead.
   Verify that it doesn't cause the orphaned loop K->L->M->N->O->P->H->K


Example 5: Flushing dependent renames in timestamp order is not always safe
===========================================================================

A-H are directories. /A/B/C/D/E/F/G/H exists on the disk.

Perform the following directory renames:

Step 1: mv /A/B/C/D/E   /A/E          (i.e., move E from D to A)
Step 2: mv /A/B/C       /A/E/F/G/H/C  (i.e., move C from B to H)
Step 3: mv /A/E/F/G     /G            (i.e., move G from F to /)

Then fsync /G/H. Verify that it doesn't cause the orphaned loop
H->C->D->E->F->G->H.

Here is the tricky part:

a. Either Step 1 or Step 3 can make Step 2 valid. That is, both of them can
   serve as the "cut" (even though Step 3 occurred after Step 2).

b. In order to track down dependencies for Step 2, if we go up the final
   in-memory tree starting from /G/H and go up to the root, then we will only
   find root as the dirty directory (thus pointing at Step 3); in particular,
   we will never be able to find Step 1, because directory A is no longer an
   ancestor of G.

   Now, if we order these 2 steps in timestamp order, we get (Step 2, Step 3),
   but flushing them out in that order will cause a loop on the disk right after
   Step 2! So the correct order to flush them is actually (Step 3, Step 2), even
   though this is not the timestamp order!


Example 6: Ancestor-Descendant relationships are not rigid
==========================================================

A-H are directories. /A/B/C/D/E/F/G/H exists on the disk.

Perform the following directory renames:

[ Initially C is an ancestor of H ]

Step 1: mv /A/B/C/D/E   /E
Step 2: mv /E/F/G       /G
Step 3: mv /A/B/C       /G/H/C       [ Now C is a descendant of H ]
Step 4: mv /G/H/C       /C
Step 5: mv /G           /C/D/G       [ Now C is an ancestor of H again ]
Step 6: mv /A/B         /C/D/G/H/B

Then fsync /C/D/G/H. Verify that it doesn't cause the orphaned loop
C->D->G->H->C.

An fsync algorithm that tries to keep track of ancestor-descendant relationships
across directories can get really complicated in such scenarios and can be
very hard to get right.

Also, note that H is dirty and 2 of its transactions are: rename C into H, and
rename C out of H (and into root). We can't really absorb them because they
rename C from and to different directories overall (B and root). Avoiding loops
in this scenario needs accurate tracking of the dependent renames and precise
control over the partial flushes at each dependent dirty directory (root, D and
H).

